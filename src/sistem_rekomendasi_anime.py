# -*- coding: utf-8 -*-
"""sistem rekomendasi anime.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PTL7Dw63suk4-52YUHnZZmrPtHscNdBp

# Anime Recommendation System Using Python: Building a Content-Based Filtering Model

## Persiapkan dataset

- asal dataset : CooperUnion/anime-recommendations-database
"""

import zipfile
import pandas as pd
import numpy as np

from google.colab import files
files.upload()

!kaggle datasets download -d CooperUnion/anime-recommendations-database

with zipfile.ZipFile('anime-recommendations-database.zip', 'r') as zip_ref:
    zip_ref.extractall('anime-recommendations-database')

anime_all = pd.read_csv('/content/anime-recommendations-database/anime.csv')

"""## Data Understanding"""

anime_all

"""## Univariate Exploratory Data Analysis"""

anime_all.describe()

anime_all.groupby('genre')['genre'].agg('count')

import matplotlib.pyplot as plt

plt.hist(anime_all.rating, edgecolor = 'black')
plt.title("Anime's Ratings Distribution")
plt.ylabel('Total')
plt.xlabel('Avg Rating')
plt.show()

"""## Data Preparation

### Selection Data
"""

anime_add = pd.DataFrame(anime_all, columns=['anime_id', 'name', 'genre', 'type', 'episodes', 'rating', 'members'])

anime_add

"""### missing values"""

anime_add.isnull().sum()

anime_add = anime_add.dropna(axis=0)

anime_add

anime_add.isna().sum()

anime = anime_add

anime

"""### Menggabungkan Data

#### Top 10 Rekomendasi anime
"""

anime.sort_values(by = 'rating', ascending=False).head(10)

"""## Content Based Filtering Model"""

import sklearn

from sklearn.feature_extraction.text import TfidfVectorizer

tf = TfidfVectorizer()
tf.fit(anime['genre'])
tf.get_feature_names_out()

tfidf_matrix = tf.fit_transform(anime['genre'])
tfidf_matrix.shape

tfidf_matrix.todense()

pd.DataFrame(
    tfidf_matrix.todense(),
    columns = tf.get_feature_names_out(),
    index = anime.name
).sample(27, axis=1).sample(10, axis=0)

from sklearn.metrics.pairwise import cosine_similarity

coSim = cosine_similarity(tfidf_matrix)
coSim

coSim_df = pd.DataFrame(coSim, index = anime['name'], columns=anime['name'])
print('Shape : ', coSim_df.shape)

coSim_df.sample(10, axis=1).sample(10, axis=0)

def anime_recommendation(
                    name,
                    similarity_data = coSim_df,
                    items = anime[['name', 'genre']],
                    k=5):

                    index = similarity_data.loc[:,name].to_numpy().argpartition(range(-1, -k, -1))
                    closest = similarity_data.columns[index[-1:-(k+2):-1]]
                    closest = closest.drop(name, errors='ignore')

                    return pd.DataFrame(closest).merge(items).head(k)

anime[anime.name.eq('Nayuta')]

anime_recommendation('Nayuta')